[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float width: hint_range(0.1, 30.0);
uniform vec4 outline_color: hint_color;

void fragment(){
	float size = width * 1.0 / float(textureSize(TEXTURE, 0).x);

	vec4 sprite_color = texture(TEXTURE, UV);
	float alpha = -8.0 * sprite_color.a;
	alpha += texture(TEXTURE, UV + vec2(size, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(-size, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, size)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, -size)).a;

	vec4 final_color = mix(sprite_color, outline_color, clamp(alpha, 0.7, 1.0));
	COLOR = vec4(final_color.rgb, clamp(abs(alpha) + sprite_color.a, 0.0, 1.0));
	
	
//	vec4 col = texture(TEXTURE, UV);
//    vec2 ps = TEXTURE_PIXEL_SIZE * width;
//    float a;
//    float maxa = col.a;
//    float mina = col.a;
//
//
//    for(float x = -1.0; x <= 1.0; x+=0.05) {
//        float y = 1.0 - (x*x);
//        if(vec2(x,y) == vec2(0.0)) {
//            continue; // ignore the center of kernel
//        }
//
//        a = texture(TEXTURE, UV + vec2(x,y)*ps).a;
//        maxa = max(a, maxa); 
//        mina = min(a, mina);
//    }
//
//    for(float x = -1.0; x <= 1.0; x+=0.05) {
//        float y = -1.0 + (x*x);
//        if(vec2(x,y) == vec2(0.0)) {
//            continue; // ignore the center of kernel
//        }
//		a = texture(TEXTURE, UV + vec2(x,y+10.0)*ps).a;
//
////        maxa = max(a, maxa); 
//        mina = min(a, mina);
//    }
//
//
//    // Fill transparent pixels only, don't overlap texture
//    if(col.a < 2.0) {
//        COLOR = mix(col, outline_color, maxa-mina);
//    } 
//	else {
//        COLOR = col;
//    }

}"
custom_defines = ""

[resource]
shader = SubResource( 1 )
shader_param/width = 0.1
shader_param/outline_color = Color( 0.607843, 0.435294, 0.717647, 1 )
